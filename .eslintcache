[{"/Users/gregorynoethlich/Desktop/NucampFolder/Portfolio Projects/React Project/kokomosite/src/index.js":"1","/Users/gregorynoethlich/Desktop/NucampFolder/Portfolio Projects/React Project/kokomosite/src/App.js":"2","/Users/gregorynoethlich/Desktop/NucampFolder/Portfolio Projects/React Project/kokomosite/src/reportWebVitals.js":"3","/Users/gregorynoethlich/Desktop/NucampFolder/Portfolio Projects/React Project/kokomosite/src/components/MainComponent.js":"4","/Users/gregorynoethlich/Desktop/NucampFolder/Portfolio Projects/React Project/kokomosite/src/components/HeaderComponent.js":"5","/Users/gregorynoethlich/Desktop/NucampFolder/Portfolio Projects/React Project/kokomosite/src/components/FooterComponent.js":"6","/Users/gregorynoethlich/Desktop/NucampFolder/Portfolio Projects/React Project/kokomosite/src/components/CarouselComponent.js":"7","/Users/gregorynoethlich/Desktop/NucampFolder/Portfolio Projects/React Project/kokomosite/src/shared/drinks.js":"8","/Users/gregorynoethlich/Desktop/NucampFolder/Portfolio Projects/React Project/kokomosite/src/shared/dinner.js":"9","/Users/gregorynoethlich/Desktop/NucampFolder/Portfolio Projects/React Project/kokomosite/src/shared/dessert.js":"10","/Users/gregorynoethlich/Desktop/NucampFolder/Portfolio Projects/React Project/kokomosite/src/components/ReserveComponent.js":"11","/Users/gregorynoethlich/Desktop/NucampFolder/Portfolio Projects/React Project/kokomosite/src/components/ContactComponent.js":"12","/Users/gregorynoethlich/Desktop/NucampFolder/Portfolio Projects/React Project/kokomosite/src/components/HomeComponent.js":"13","/Users/gregorynoethlich/Desktop/NucampFolder/Portfolio Projects/React Project/kokomosite/src/components/MenuComponent.js":"14"},{"size":640,"mtime":1612634559697,"results":"15","hashOfConfig":"16"},{"size":410,"mtime":1612634672352,"results":"17","hashOfConfig":"16"},{"size":362,"mtime":1611798171724,"results":"18","hashOfConfig":"16"},{"size":1300,"mtime":1615668768447,"results":"19","hashOfConfig":"16"},{"size":2930,"mtime":1615580658090,"results":"20","hashOfConfig":"16"},{"size":1914,"mtime":1615580960313,"results":"21","hashOfConfig":"16"},{"size":2036,"mtime":1615496799890,"results":"22","hashOfConfig":"16"},{"size":1415,"mtime":1615518758287,"results":"23","hashOfConfig":"16"},{"size":1576,"mtime":1612814807872,"results":"24","hashOfConfig":"16"},{"size":627,"mtime":1612817286560,"results":"25","hashOfConfig":"16"},{"size":6009,"mtime":1615580756920,"results":"26","hashOfConfig":"16"},{"size":9362,"mtime":1615582304545,"results":"27","hashOfConfig":"16"},{"size":3504,"mtime":1615494947769,"results":"28","hashOfConfig":"16"},{"size":3938,"mtime":1615666816869,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"18u5ngu",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"32"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"/Users/gregorynoethlich/Desktop/NucampFolder/Portfolio Projects/React Project/kokomosite/src/index.js",[],["63","64"],"/Users/gregorynoethlich/Desktop/NucampFolder/Portfolio Projects/React Project/kokomosite/src/App.js",[],"/Users/gregorynoethlich/Desktop/NucampFolder/Portfolio Projects/React Project/kokomosite/src/reportWebVitals.js",[],"/Users/gregorynoethlich/Desktop/NucampFolder/Portfolio Projects/React Project/kokomosite/src/components/MainComponent.js",[],"/Users/gregorynoethlich/Desktop/NucampFolder/Portfolio Projects/React Project/kokomosite/src/components/HeaderComponent.js",["65","66","67","68","69","70","71"],"import React, { Component } from 'react';\nimport { Nav, Navbar, NavbarBrand, NavbarToggler, Collapse, NavItem, Jumbotron, \n    Button, Modal, ModalHeader, ModalBody, \n    Form, FormGroup, Input, Label } from 'reactstrap';\nimport { NavLink } from 'react-router-dom';\nimport HomeCarousel from './CarouselComponent';\n\nclass Header extends Component {\n\n    constructor(props) {\n        super(props);\n        \n        this.toggleNav = this.toggleNav.bind(this);\n        this.toggleModal = this.toggleModal.bind(this);\n\n        this.state = {\n            isNavOpen: false,\n            isModalOpen: false\n        };\n    }\n\n    toggleNav() {\n        this.setState({\n            isNavOpen: !this.state.isNavOpen\n        });\n    }\n\n    toggleModal() {\n        this.setState({\n            isModalOpen: !this.state.isModalOpen\n        });\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <Navbar dark expand=\"sm\">\n                    <div className=\"container\">\n                        <NavbarToggler onClick={this.toggleNav} />\n                        <Collapse isOpen={this.state.isNavOpen} navbar>\n                            <Nav className=\"mx-auto ml-auto nav-fill w-100\" navbar>\n                                <NavItem>\n                                    <NavLink className=\"nav-link\" to=\"/aboutus\">\n                                        <p>About</p>\n                                    </NavLink>\n                                </NavItem>\n                                <NavItem>\n                                    <NavLink className=\"nav-link\" to=\"/menu\">\n                                        <p>Menu</p>\n                                    </NavLink>\n                                </NavItem>\n                                <NavItem>\n                                    <NavLink className=\"nav-link\" to=\"/home\">\n                                        <h3>Kokomo</h3>\n                                    </NavLink>\n                                </NavItem>\n                                <NavItem>\n                                <NavLink className=\"nav-link\" to=\"/contactus\">\n                                        <p>Contact</p>\n                                    </NavLink>\n                                </NavItem>\n                                <NavLink className=\"nav-link\" to=\"/orderonline\">\n                                    <p>Order Online</p>\n                                </NavLink>\n                            </Nav>\n                        </Collapse>\n                    </div>\n                </Navbar>\n                <HomeCarousel />\n\n                <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\n                    <ModalHeader toggle={this.toggleModal}>Login</ModalHeader>\n                    <ModalBody>\n\n                    </ModalBody>\n                </Modal>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Header;","/Users/gregorynoethlich/Desktop/NucampFolder/Portfolio Projects/React Project/kokomosite/src/components/FooterComponent.js",[],"/Users/gregorynoethlich/Desktop/NucampFolder/Portfolio Projects/React Project/kokomosite/src/components/CarouselComponent.js",[],["72","73"],"/Users/gregorynoethlich/Desktop/NucampFolder/Portfolio Projects/React Project/kokomosite/src/shared/drinks.js",[],"/Users/gregorynoethlich/Desktop/NucampFolder/Portfolio Projects/React Project/kokomosite/src/shared/dinner.js",[],"/Users/gregorynoethlich/Desktop/NucampFolder/Portfolio Projects/React Project/kokomosite/src/shared/dessert.js",[],"/Users/gregorynoethlich/Desktop/NucampFolder/Portfolio Projects/React Project/kokomosite/src/components/ReserveComponent.js",["74","75","76","77"],"import React, { Component } from 'react';\nimport { Card, CardHeader, CardBody, Input, CardTitle, \n    Button, Label, Row, Col } from 'reactstrap';\nimport { Control, LocalForm, Errors } from 'react-redux-form';\n\nconst required = val => val && val.length;\nconst maxLength = len => val => !val || (val.length <= len);\nconst minLength = len => val => val && (val.length >= len);\nconst isNumber = val => !isNaN(+val);\n\nclass RenderReserve extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            name: '',\n            numPeople: '',\n            date: '',\n            time: '',\n            feedback: '',\n            touched: {\n                name: false,\n                numPeople: false,\n                date: false,\n                time: false\n            }\n        };\n\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleSubmit(values) {\n        console.log('Current state is: ' + JSON.stringify(values));\n        alert('Current state is: ' + JSON.stringify(values));\n    }\n\n    render() {\n        return (\n        <Card>\n            <CardHeader className=\"bg-info text-white\">\n                <CardTitle id=\"reserve\">Reserve A Table</CardTitle>\n            </CardHeader>\n            <CardBody>\n                <LocalForm onSubmit={values => this.handleSubmit(values)}>\n                    <div className=\"form-group row\">\n                        <Label htmlFor=\"name\" className=\"col-sm-2 col-form-label\">Name: </Label>\n                        <Col sm={10}>\n                            <Control.text model=\".name\" id=\"name\" name=\"name\"\n                                    className=\"form-control\"\n                                    placeholder=\"Enter Your Name...\"\n                                    validators={{\n                                        required,\n                                        minLength: minLength(2),\n                                        maxLength: maxLength(15)\n                                    }}\n                            />\n                            <Errors\n                                className=\"text-danger\"\n                                model=\".name\"\n                                show=\"touched\"\n                                Component=\"div\"\n                                messages={{\n                                    required: 'Required',\n                                    minLength: 'Must be at least 2 characters',\n                                    maxLength: 'Must be 15 characters or less'\n                                }}\n                            />\n                        </Col>\n                    </div>\n                    <div className=\"form-group row\">\n                        <Label htmlFor=\"numPeople\" className=\"col-sm-2 col-form-label\">Number of People:</Label>\n                        <Col sm={10}>\n                            <Control.text model=\".numPeople\" id=\"numPeople\" name=\"numPeople\"\n                                    className=\"form-control\"\n                                    placeholder=\"Number of People\"\n                                    validators={{\n                                        required,\n                                        isNumber\n                                    }}\n                                />\n                            <Errors\n                                className=\"text-danger\"\n                                model=\".numPeople\"\n                                show=\"touched\"\n                                Component=\"div\"\n                                messages={{\n                                    required: 'Required',\n                                    isNumber: 'Must be a number'\n                                }}\n                            />\n                        </Col>\n                    </div>\n                    <div className=\"form-group row\">\n                        <Label htmlFor=\"date\" className=\"col-sm-2 col-form-label\">Date:</Label>\n                        <Col sm={10}>\n                            <Control type=\"date\" model=\".date\" id=\"date\" name=\"date\" \n                                    className=\"form-control\"\n                                    placeholder=\"Number of People\"\n                                    validators={{\n                                        required\n                                    }}\n                                />\n                            <Errors\n                                className=\"text-danger\"\n                                model=\".date\"\n                                show=\"touched\"\n                                Component=\"div\"\n                                messages={{\n                                    required: 'Required'\n                                }}\n                            />\n                        </Col>\n                    </div>\n                    <div className=\"form-group row\">\n                        <Label htmlFor=\"time\" className=\"col-sm-2 col-form-label\">Time:</Label>\n                        <Col sm={10}>\n                            <Control type=\"time\" model=\".time\" id=\"time\" name=\"time\"\n                                    className=\"form-control\"\n                                    validators={{\n                                        required\n                                    }}\n                                />\n                            <Errors\n                                className=\"text-danger\"\n                                model=\".time\"\n                                show=\"touched\"\n                                Component=\"div\"\n                                messages={{\n                                    required: 'Required'\n                                }}\n                            />\n                        </Col>\n                    </div>\n                    <Button color=\"info\">Reserve A Table</Button>\n                </LocalForm>\n            </CardBody>\n        </Card>\n        );\n    }\n}\n\nexport default RenderReserve;","/Users/gregorynoethlich/Desktop/NucampFolder/Portfolio Projects/React Project/kokomosite/src/components/ContactComponent.js",["78","79","80","81","82","83","84","85"],"import React, { Component } from 'react';\nimport { Breadcrumb, BreadcrumbItem, \n    Button, Label, Col, Row } from 'reactstrap';\nimport { Link } from 'react-router-dom';\nimport { Control, LocalForm, Errors } from 'react-redux-form';\n\nconst required = val => val && val.length;\nconst maxLength = len => val => !val || (val.length <= len);\nconst minLength = len => val => val && (val.length >= len);\nconst isNumber = val => !isNaN(+val);\nconst validEmail = val => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\n\nclass Contact extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            firstName: '',\n            lastName: '',\n            phoneNum: '',\n            email: '',\n            feedback: '',\n            touched: {\n                firstName: false,\n                lastName: false,\n                phoneNum: false,\n                email: false\n            }\n        };\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n    handleSubmit(values) {\n        console.log('Current state is: ' + JSON.stringify(values));\n        alert('Current state is: ' + JSON.stringify(values));\n    }\n    render() {\n        return (\n            <div className=\"container\">\n                <br /> <br />\n                <div className=\"row row-content align-items-center\">\n                    <div className=\"col-sm-4\">\n                        <h5>Our Address</h5>\n                        <address>\n                            123 S Main Ave.<br />\n                            Sioux Falls, SD 57105<br />\n                            U.S.A.\n                        </address>\n                    </div>\n                    <div className=\"col\">\n                        <a role=\"button\" className=\"btn btn-link\" href=\"tel:+12065551234\"><i className=\"fa fa-phone\" /> 1-605-321-1234</a><br />\n                        <a role=\"button\" className=\"btn btn-link\" href=\"mailto:fakeemail@fakeemail.co\"><i className=\"fa fa-envelope-o\" /> kokomobarandgrille@kokomo.co</a>\n                    </div>\n                </div>\n                                <div className=\"row row-content\">\n                    <div className=\"col-12\">\n                        <h2 id=\"cursive\">We would love to hear from you!</h2>\n                        <hr />\n                    </div>\n                    <div className=\"col-md-10\">\n                        <LocalForm onSubmit={values => this.handleSubmit(values)}>\n                            <Row className=\"form-group\">\n                                <Label htmlFor=\"firstName\" md={2}>First Name: </Label>\n                                <Col md={10}>\n                                    <Control.text model=\".firstName\" id=\"firstName\" name=\"firstName\"\n                                        placeholder=\"First Name\"\n                                        className=\"form-control\"\n                                        validators={{\n                                            required,\n                                            minLength: minLength(2),\n                                            maxLength: maxLength(15)\n                                        }}\n                                    />\n                                    <Errors\n                                        className=\"text-danger\"\n                                        model=\".firstName\"\n                                        show=\"touched\"\n                                        component=\"div\"\n                                        messages={{\n                                            required: 'Required',\n                                            minLength: 'Must be at least 2 characters',\n                                            maxLength: 'Must be 15 characters or less'\n                                        }}\n                                        />\n                                </Col>\n                            </Row>\n                            <Row className=\"form-group\">                                \n                            <Label htmlFor=\"lastName\" md={2}>Last Name: </Label>\n                                <Col md={10}>\n                                    <Control.text model=\".lastName\" id=\"lastName\" name=\"lastName\"\n                                        placeholder=\"Last Name\"\n                                        className=\"form-control\"\n                                        validators={{\n                                            required,\n                                            minLength: minLength(2),\n                                            maxLength: maxLength(15)\n                                        }}\n                                    />\n                                    <Errors\n                                        className=\"text-danger\"\n                                        model=\".lastName\"\n                                        show=\"touched\"\n                                        component=\"div\"\n                                        messages={{\n                                            required: 'Required',\n                                            minLength: 'Must be at least 2 characters',\n                                            maxLength: 'Must be 15 characters or less'\n                                        }}\n                                    />\n                                </Col>                        \n                            </Row>\n                            <Row className=\"form-group\">\n                                <Label htmlFor=\"phoneNum\" md={2}>Phone Number: </Label>\n                                <Col md={10}>\n                                    <Control.text model=\".phoneNum\" id=\"phoneNum\" name=\"phoneNum\"\n                                        placeholder=\"Phone number\"\n                                        className=\"form-control\"\n                                        validators={{\n                                            required,\n                                            minLength: minLength(10),\n                                            maxLength: maxLength(15),\n                                            isNumber\n                                        }}\n                                    />\n                                    <Errors\n                                        className=\"text-danger\"\n                                        model=\".phoneNum\"\n                                        show=\"touched\"\n                                        component=\"div\"\n                                        messages={{\n                                            required: 'Required',\n                                            minLength: 'Must be at least 10 numbers',\n                                            maxLength: 'Must be 15 numbers or less',\n                                            isNumber: 'Must be a number'\n                                        }}\n                                    />\n                                </Col>\n                            </Row>\n                            <Row className=\"form-group\">\n                                <Label htmlFor=\"email\" md={2}>Email Address: </Label>\n                                <Col md={10}>\n                                    <Control.text model=\".email\" id=\"email\" name=\"email\"\n                                        placeholder=\"Email\"\n                                        className=\"form-control\"\n                                        validators={{\n                                            required,\n                                            validEmail\n                                        }}\n                                    />\n                                    <Errors\n                                        className=\"text-danger\"\n                                        model=\".email\"\n                                        show=\"touched\"\n                                        component=\"div\"\n                                        messages={{\n                                            required: 'Required',\n                                            validEmail: 'Invalid email address'\n                                        }}\n                                    />\n                                </Col>\n                            </Row>\n                            <Row className=\"form-group\">\n                                <Label htmlFor=\"feedback\" md={2}>Inquiries and Feedback: </Label>\n                                <Col md={10}>\n                                    <Control.textarea model=\".feedback\" id=\"feedback\" name=\"feedback\"\n                                        rows=\"12\"\n                                        className=\"form-control\"\n                                    />\n                                </Col>\n                            </Row>\n                            <Row className=\"form-group\">\n                                <Col md={{size: 10, offset: 2}}>\n                                    <Button type=\"submit\" color=\"info\">\n                                        Send Message\n                                    </Button>\n                                </Col>\n                            </Row>\n                        </LocalForm>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\nexport default Contact;","/Users/gregorynoethlich/Desktop/NucampFolder/Portfolio Projects/React Project/kokomosite/src/components/HomeComponent.js",[],"/Users/gregorynoethlich/Desktop/NucampFolder/Portfolio Projects/React Project/kokomosite/src/components/MenuComponent.js",[],{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","severity":1,"message":"91","line":2,"column":23,"nodeType":"92","messageId":"93","endLine":2,"endColumn":34},{"ruleId":"90","severity":1,"message":"94","line":2,"column":70,"nodeType":"92","messageId":"93","endLine":2,"endColumn":79},{"ruleId":"90","severity":1,"message":"95","line":3,"column":5,"nodeType":"92","messageId":"93","endLine":3,"endColumn":11},{"ruleId":"90","severity":1,"message":"96","line":4,"column":5,"nodeType":"92","messageId":"93","endLine":4,"endColumn":9},{"ruleId":"90","severity":1,"message":"97","line":4,"column":11,"nodeType":"92","messageId":"93","endLine":4,"endColumn":20},{"ruleId":"90","severity":1,"message":"98","line":4,"column":22,"nodeType":"92","messageId":"93","endLine":4,"endColumn":27},{"ruleId":"90","severity":1,"message":"99","line":4,"column":29,"nodeType":"92","messageId":"93","endLine":4,"endColumn":34},{"ruleId":"86","replacedBy":"100"},{"ruleId":"88","replacedBy":"101"},{"ruleId":"90","severity":1,"message":"98","line":2,"column":38,"nodeType":"92","messageId":"93","endLine":2,"endColumn":43},{"ruleId":"90","severity":1,"message":"102","line":3,"column":20,"nodeType":"92","messageId":"93","endLine":3,"endColumn":23},{"ruleId":"103","severity":1,"message":"104","line":49,"column":29,"nodeType":"105","endLine":57,"endColumn":31},{"ruleId":"103","severity":1,"message":"104","line":74,"column":29,"nodeType":"105","endLine":81,"endColumn":35},{"ruleId":"90","severity":1,"message":"106","line":2,"column":10,"nodeType":"92","messageId":"93","endLine":2,"endColumn":20},{"ruleId":"90","severity":1,"message":"107","line":2,"column":22,"nodeType":"92","messageId":"93","endLine":2,"endColumn":36},{"ruleId":"90","severity":1,"message":"108","line":4,"column":10,"nodeType":"92","messageId":"93","endLine":4,"endColumn":14},{"ruleId":"103","severity":1,"message":"104","line":63,"column":37,"nodeType":"105","endLine":71,"endColumn":39},{"ruleId":"103","severity":1,"message":"104","line":88,"column":37,"nodeType":"105","endLine":96,"endColumn":39},{"ruleId":"103","severity":1,"message":"104","line":113,"column":37,"nodeType":"105","endLine":122,"endColumn":39},{"ruleId":"103","severity":1,"message":"104","line":140,"column":37,"nodeType":"105","endLine":147,"endColumn":39},{"ruleId":"103","severity":1,"message":"109","line":163,"column":37,"nodeType":"105","endLine":166,"endColumn":39},"no-native-reassign",["110"],"no-negated-in-lhs",["111"],"no-unused-vars","'NavbarBrand' is defined but never used.","Identifier","unusedVar","'Jumbotron' is defined but never used.","'Button' is defined but never used.","'Form' is defined but never used.","'FormGroup' is defined but never used.","'Input' is defined but never used.","'Label' is defined but never used.",["110"],["111"],"'Row' is defined but never used.","react/jsx-pascal-case","Imported JSX component text must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","'Breadcrumb' is defined but never used.","'BreadcrumbItem' is defined but never used.","'Link' is defined but never used.","Imported JSX component textarea must be in PascalCase or SCREAMING_SNAKE_CASE","no-global-assign","no-unsafe-negation"]